:py:mod:`tidypandas.series_utils`
=================================

.. py:module:: tidypandas.series_utils


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   tidypandas.series_utils._extend
   tidypandas.series_utils.ifelse
   tidypandas.series_utils.coalesce
   tidypandas.series_utils.case_when
   tidypandas.series_utils.n_distinct
   tidypandas.series_utils._order_series
   tidypandas.series_utils.order
   tidypandas.series_utils._rank
   tidypandas.series_utils.min_rank
   tidypandas.series_utils.row_number
   tidypandas.series_utils.dense_rank
   tidypandas.series_utils.percent_rank
   tidypandas.series_utils.cume_dist
   tidypandas.series_utils.as_bool



Attributes
~~~~~~~~~~

.. autoapisummary::

   tidypandas.series_utils.if_else


.. py:function:: _extend(aseries, length)

   
   _extend
   Extends a series to a given length by repeating the values of the series

   :param aseries:
   :type aseries: A pandas series
   :param length: length to repeat to
   :type length: int

   :rtype: A pandas series

   .. rubric:: Examples

   >>> ser = pd.Series([1,2,3])
   >>> _extend(ser, 5)















   ..
       !! processed by numpydoc !!

.. py:function:: ifelse(condition, yes, no)

   
   ifelse
   Vectorized if and else

   :param condition: Should evaluate to a boolean list/array/Series
   :type condition: expression or list/array/Series
   :param yes: Should evaluate to a list/array/Series
   :type yes: expression or list/array/Series
   :param no: Should evaluate to a list/array/Series
   :type no: expression or list/array/Series

   :rtype: Pandas Series

   .. rubric:: Notes

   1. Thin wrapper over np.where
   2. Does not preserve index.

   .. rubric:: Examples

   >>> x = pd.Series([1,pd.NA,3]).astype('Int64')
   >>> y = pd.Series([4,5,6]).astype('Int64')
   >>> z = pd.Series([7,8,9]).astype('Int64')
   >>>
   >>> ifelse(x > 2, y + 1, z - 1)















   ..
       !! processed by numpydoc !!

.. py:data:: if_else
   

   

.. py:function:: coalesce(list_of_series)

   
   coalesce
   Given a list of pandas Series, coalesce finds the first non-missing value
   at each position for the first Series in the list

   :param list_of_series: List of pandas Series
   :type list_of_series: list

   :rtype: Pandas Series of length of the first series in the input list

   .. rubric:: Notes

   1. If on the inputs has length 1, then it is extended.
      Else, inputs are expected to have same length.
   3. Does not preserve index.

   .. rubric:: Examples

   >>> x = pd.Series([1, pd.NA, pd.NA])
   >>> y = pd.Series([4, 5    , pd.NA])
   >>> z = pd.Series([7, 8    , pd.NA])
   >>> a = 10
   >>>
   >>> coalesce([x, y, z, a])















   ..
       !! processed by numpydoc !!

.. py:function:: case_when(list_of_tuples, default=pd.NA)

   
   case_when
   Vectorized version of multiple ifelse statements

   :param list_of_tuples: First element of the tuple should be an expression when evaluated should
                          result in a boolean array/Series.
                          Second element of the tuple should be the value to be assigned to the
                          postitions corresponding the boolean array/Series
   :type list_of_tuples: list
   :param default: Default is pd.NA.
   :type default: scalar value to assign when none of the conditions are met.

   :rtype: Pandas Series

   .. rubric:: Notes

   1. Does not preserve index.

   .. rubric:: Examples

   >>> x = pd.Series([3, 5 , pd.NA, 4]).astype('Int64')
   >>>
   >>> case_when([(x >= 5, 500), (x >= 4, 400), (pd.isna(x), 1)])
   >>> case_when([(x >= 5, 500), (x >= 4, 400)], default = 100)















   ..
       !! processed by numpydoc !!

.. py:function:: n_distinct(x, na_rm=False)

   
   n_distinct
   Number of distinct values in a series

   :param x:
   :type x: A pandas series
   :param na_rm (default is False):
   :type na_rm (default is False): bool, Should missing value be counted

   :rtype: int, Number of distinct values















   ..
       !! processed by numpydoc !!

.. py:function:: _order_series(x, na_position='last')

   
   _order_series
   Permutation order of the series

   :param x:
   :type x: A pandas series
   :param na_position:
   :type na_position: str, One among "first", "last"

   :rtype: A pandas series indicating the permutation order

   .. rubric:: Examples

   >>> ser = pd.Series([3, 1, 2, pd.NA]).astype('Int64')
   >>> _order_series(ser)















   ..
       !! processed by numpydoc !!

.. py:function:: order(x, ascending=True, na_position='last')

   
   order
   Permutation order of the series or a list of series

   :param x:
   :type x: A pandas series or a list of series
   :param ascending: When a list, should have match the length of x
   :type ascending: str or a list of bools
   :param na_position: One among: "first", "last"
   :type na_position: str

   .. rubric:: Notes

   1. When x is a list of series, 2nd series is used to beak the ties in the 1st
   series and so on.

   :rtype: A pandas series indicating the permutation order

   .. rubric:: Examples

   >>> ser = pd.Series([3, 1, 2, pd.NA]).astype('Int64')
   >>> order(ser)
   >>>
   >>> sers = [pd.Series([1, 1]).astype('Int64'), pd.Series([2, 1]).astype('Int64')]
   >>> order(sers)















   ..
       !! processed by numpydoc !!

.. py:function:: _rank(x, type, ascending=True, percent=False)

   
   _rank
   ranking order of the series or a list of series

   :param x:
   :type x: A pandas series or a list of series
   :param type:
   :type type: One among "min", "first", "dense", "max"
   :param ascending: When a list, should have match the length of x
   :type ascending: str or a list of bools
   :param percent: Should the ranking order be converted to percentages
   :type percent: bool

   .. rubric:: Notes

   1. When x is a list of series, 2nd series is used to beak the ties in the 1st
   series and so on.

   :rtype: A pandas series

   .. rubric:: Notes

   Missing values are left as is. If you want to treat them as the smallest
   or largest values, replace with Inf or -Inf before ranking.

   .. rubric:: Examples

   >>> ser = pd.Series([3, 1, 2, pd.NA]).astype('Int64')
   >>> _rank(ser, "first")
   >>>
   >>> sers = [pd.Series([1, 1]).astype('Int64'), pd.Series([2, 1]).astype('Int64')]
   >>> _rank(sers, "min")















   ..
       !! processed by numpydoc !!

.. py:function:: min_rank(x, ascending=True)

   
   min_rank
   ranking order with ties set to minimum rank

   :param x:
   :type x: A pandas series or a list of series
   :param ascending: When a list, should have match the length of x
   :type ascending: str or a list of bools
   :param percent: Should the ranking order be converted to percentages
   :type percent: bool

   .. rubric:: Notes

   1. When x is a list of series, 2nd series is used to beak the ties in the 1st
   series and so on.

   :returns: * *Missing values are left as is. If you want to treat them as the smallest*
             * *or largest values, replace with Inf or -Inf before ranking.*

   .. rubric:: Examples

   >>> ser = pd.Series([3, 1, 2, 1, 3, pd.NA, 2]).astype('Int64')
   >>> min_rank(ser)















   ..
       !! processed by numpydoc !!

.. py:function:: row_number(x, ascending=True)

   
   row_number
   ranking order with ties set to first rank

   :param x:
   :type x: A pandas series or a list of series
   :param ascending: When a list, should have match the length of x
   :type ascending: str or a list of bools
   :param percent: Should the ranking order be converted to percentages
   :type percent: bool

   .. rubric:: Notes

   1. When x is a list of series, 2nd series is used to beak the ties in the 1st
   series and so on.

   :returns: * *Missing values are left as is. If you want to treat them as the smallest*
             * *or largest values, replace with Inf or -Inf before ranking.*

   .. rubric:: Examples

   >>> ser = pd.Series([3, 1, 2, 1, 3, pd.NA, 2]).astype('Int64')
   >>> row_number(ser)















   ..
       !! processed by numpydoc !!

.. py:function:: dense_rank(x, ascending=True)

   
   dense_rank
   ranking order with ties so that there is no gaps in ranks

   :param x:
   :type x: A pandas series or a list of series
   :param ascending: When a list, should have match the length of x
   :type ascending: str or a list of bools
   :param percent: Should the ranking order be converted to percentages
   :type percent: bool

   .. rubric:: Notes

   1. When x is a list of series, 2nd series is used to beak the ties in the 1st
   series and so on.

   :returns: * *Missing values are left as is. If you want to treat them as the smallest*
             * *or largest values, replace with Inf or -Inf before ranking.*

   .. rubric:: Examples

   >>> ser = pd.Series([4, 1, 2, 1, 3, pd.NA, 2]).astype('Int64')
   >>> dense_rank(ser)















   ..
       !! processed by numpydoc !!

.. py:function:: percent_rank(x, ascending=True)

   
   percent_rank
   ranking order witbh ties set to minimum rank rescaled between 0 and 1

   :param x:
   :type x: A pandas series or a list of series
   :param ascending: When a list, should have match the length of x
   :type ascending: str or a list of bools
   :param percent: Should the ranking order be converted to percentages
   :type percent: bool

   .. rubric:: Notes

   1. When x is a list of series, 2nd series is used to beak the ties in the 1st
   series and so on.

   :returns: * *Missing values are left as is. If you want to treat them as the smallest*
             * *or largest values, replace with Inf or -Inf before ranking.*

   .. rubric:: Examples

   >>> ser = pd.Series([3, 1, 2, 1, 3, pd.NA, 2]).astype('Int64')
   >>> percent_rank(ser)















   ..
       !! processed by numpydoc !!

.. py:function:: cume_dist(x, ascending=True)

   
   cume_dist
   ranking order with ties set to maximum rank rescaled between 0 and 1

   :param x:
   :type x: A pandas series or a list of series
   :param ascending: When a list, should have match the length of x
   :type ascending: str or a list of bools
   :param percent: Should the ranking order be converted to percentages
   :type percent: bool

   .. rubric:: Notes

   1. When x is a list of series, 2nd series is used to beak the ties in the 1st
   series and so on.

   :returns: * *Missing values are left as is. If you want to treat them as the smallest*
             * *or largest values, replace with Inf or -Inf before ranking.*

   .. rubric:: Examples

   >>> ser = pd.Series([3, 1, 2, 1, 3, pd.NA, 2]).astype('Int64')
   >>> cume_dist(ser)















   ..
       !! processed by numpydoc !!

.. py:function:: as_bool(x)

   
   as_bool
   Convert boolean or object dtype series to bool series with NAs as False
   Helpful in combining multiple series in 'filter'

   :param x: Should have one of these dtypes: bool, boolean, object
   :type x: pandas series

   :rtype: A pandas series of dtype bool

   .. rubric:: Examples

   ser = pd.Series([True, False, pd.NA])
   print(str(ser.dtype))

   print(as_bool(ser))
   print(str(as_bool(ser).dtype))

   ser2 = ser.convert_dtypes()
   print(str(ser2.dtype))

   print(as_bool(ser2))
   print(str(as_bool(ser2).dtype))















   ..
       !! processed by numpydoc !!

